1) если отвалился редис удалять запись или что-то еще 

1) Fix Errors when confirm email os not json +
2) We need to show only personal info when not confirmed email, to change mail
??? 
3) add env mail, password and so on
4) docker compose a) redis b) sidekiq

1) jwt and only front checks state
2) check before each action user rights ...
  # config.action_mailer.default_url_options = { :host => "https://blocklog.ru" }
  # config.action_mailer.delivery_method = :smtp




  # if assignment added to course we need to update course state
  # by get course users ids and then for each user we need to set this thing to 
  # get course users
  # get assignments active 
  # for all AssignmentUser by course and user check_course_state
  # think how to do this correct 

  course image
      # check update, because i dont knwo behaviour if we have 
      # joined record

1) Assignment users remake queries in assignment
2) Also check woking solutions
3) Need to refactor views, but i dont know how, what is need
4) not good lifehack when i get course by id and joins it with other table what behaviour will be on update and destroy
5) what we need to get when we see after update

Extract one base part (min references

4) AFTER CREATE SOLUTION 
        set course passed if 
                get assignments active, get all solution ids, 
                if arr equals then passed else not

        set count tries to assignment if broken or not
        set correct if correct, rewrites previous value


5) Assignments list, one todo as course
        joins with table assignments_users,
        with user and assignment
        gets all info passed, not passed, count tries

UPDATE AssignmentUsers set passed = false ;

UPDATE CourseUsers set passed = (CASE WHEN SELECT COUNT = )
AFTER THAT LOOK HOW TO GET IMAGE and define path to store
nginx cfg also refactor

THAN add sideqik and redis to generate hashes for user like user_id, hash
if that link passed -> user sets activated

AFTER sorting assignmentss

1) Fix permit params in model, dont fix require
2) 

1) Проверить Внесенные изменения
2) Проверить локаль на все
2) Добавить локаль


      # WE STAORE course_id for check user rights
      ############################################
      ############ ERRORS ########################
      ############################################
      ### 1) NOT FOUND ASSOCIATED ENTITY - {status: "Not found":
      ###     ErrorMessage: "Associated entity not found"} :state :not_found
      ### 2) NOT FOUND ENTITY - {status: "Not found": ErrorMessage: "Entity"}
      ### 3) UNAUTHORIZED - RENDERED BY kaminari
      ### 4) FORBIDDEN - {status: "Forbidden", ErrorMessage: "You haven't got enough rights"}
      ### 5) BAD_REQUEST - {status: "Field incorrect", "Field empty"} ...
      #############################################

##################################################
####### CURRENT ##################################
##################################################

1) Add user jbuild serializer !!!                       + 
2) Move all data from active serializer to jbuilder     + 
3) Add default value is active true for comments        +
4) Add Commnets (Check comments properly)               -+
        1) Check create comment course, assignment, solution
        2) Check get one comment by id
        3) Check get list comments by profile
        4) Check get list comments by profile and id
        5) Search comments (comment id, profile, profile + id)

        1) Test moderator, collaborator, user references to course can see commentaries
        2) Test moderator, collaborator, owner can modify comments 
        3) Check that other users cant modify comments exlude comments to solutions
        
5) TODO check user email 
6) Add custom error views
7) Add /api/v1/mycourses
8) Add admin 
9) Also think about old demands 
        1) We may need next roles
        -    1) global admin - admin ??
        +-    2) moderator for courses (by default moderator can create course, add collaborators
                can update and delete coure, can add exercises to course) 
                Moderator added + 
                Add collaborator ??? 
        +-    3) collaborator can add exercises to course, maybe can update some entities
                (maybe moderator can approve this), he cant delete course and cant delete exercises
                Role added + 
                Approve ???? think about this
        +    4) user without rights + 
        # think about this
        2) we may need to have table that stores modifications
        3) we need to add data to like comments to solution
        4) we need to create two entities (many to many) courses_users, exercises_users + 

rails g migration AddOwnerToCourse user:references
raild g model CourseUser user:references course:references course_mark:integer

# TODO i
TESTS: 
        MODERATOR
        1) Course moderator created commentary to course                        + 
        2) -//- to assignment                                                   +
        3) -//- to solution                                                     +        
        4) -//- get comments to current course                                  +  
        5) -//- get comment by id                                               + 
        7) -//- updates entity to course (equal to assignment, solution)        + 
        8) -//- deletes entitiy to course                                       +    
        COLLABORATOR 
        1) Course moderator created commentary to course                        + 
        2) -//- to assignment                                                   +
        3) -//- to solution                                                     +        
        4) -//- get comments to current course                                  +  
        5) -//- get comment by id                                               + 
        7) -//- updates entity to course (equal to assignment, solution)        + 
        8) -//- deletes entitiy to course                                       +
        owner moderator cehcked 

        USER
        1) Course moderator created commentary to course                        + 
        2) -//- to assignment                                                   +
        3) -//- to solution                                                     +        
        4) -//- get comments to current course                                  +  
        5) -//- get comment by id                                               + 
        7) -//- updates entity to course (equal to assignment, solution)        + 
        8) -//- deletes entitiy to course                                       +
        NOBODY
        1) Course moderator created commentary to course                        + 
        2) -//- to assignment                                                   +
        3) -//- to solution                                                     +        
        4) -//- get comments to current course                                  +  
        5) -//- get comment by id                                               + 
        7) -//- updates entity to course (equal to assignment, solution)        + 
        8) -//- deletes entitiy to course                                       +                                
        6) Course collaboraor created commentary to course               
        11) updates owner                            
        11) Course user created commentary to course               
        12) -//- to assignment                                           
        13) -//- to solution      
        14) -//- get comments to current course                           
        15) -//- get comment by id                                      

#ActiveRecord::StatementInvalid (PG::UnableToSend: no connection to the server)
